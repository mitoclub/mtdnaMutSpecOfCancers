table(Mut$DummySlowTurnOver)
SlowTurnover = Mut[Mut$DummySlowTurnOver == 1,]
MutSpec1 = data.frame(table(SlowTurnover$SubstWithContext)); names(MutSpec1)[2] = 'SlowTurnoverFreq'
NotSlowTurnover = Mut[Mut$DummySlowTurnOver == 0,]
A = Mut[Mut$DummySlowTurnOver == 1,]
A = data.frame(table(A$SubstWithContext)); names(A)[2] = 'AFreq'
B = Mut[Mut$DummySlowTurnOver == 0,]
B = data.frame(table(B$SubstWithContext)); names(B)[2] = 'BFreq'
AB = merge(A,B)
View(AB)
library(lsa)
install.package(lsa)
install.packages(lsa)
install.packages("lsa")
library(lsa) # install.packages("lsa")
install.packages("SnowballC")
install.packages("SnowballC")
library(lsa)
install.packages("SnowballC")
install.packages("SnowballC")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
library(knitr)
library(tidyverse)
library(kableExtra)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lsa) # install.packages("lsa"); install.packages("SnowballC")
Mut = read.table("../data/1raw/mtDNA_snv_Oct2016.txt", head = TRUE, sep = '\t')
names(Mut)
Mut$Subst = paste(Mut$ref,Mut$var,sep = '>')
table(Mut$Subst) # light chain notation is be default
table(Mut$Tier2) # cancer tissue
Mut$tumor_var_freq = as.numeric(gsub('%','',Mut$tumor_var_freq))
summary(Mut$tumor_var_freq)
hist(Mut$position, breaks = 200)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
library(knitr)
library(tidyverse)
library(kableExtra)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lsa) # install.packages("lsa"); install.packages("SnowballC")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
library(knitr)
library(tidyverse)
library(kableExtra)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lsa) # install.packages("lsa"); install.packages("SnowballC")
Mut = read.table("../data/1raw/mtDNA_snv_Oct2016.txt", head = TRUE, sep = '\t')
names(Mut)
Mut$Subst = paste(Mut$ref,Mut$var,sep = '>')
table(Mut$Subst) # light chain notation is be default
table(Mut$Tier2) # cancer tissue
Mut$tumor_var_freq = as.numeric(gsub('%','',Mut$tumor_var_freq))
summary(Mut$tumor_var_freq)
hist(Mut$position, breaks = 200)
CancerTissue = c('Bladder','Bone/SoftTissue','Breast','Biliary','Cervix','Lymphoid','Myeloid','Colon/Rectum','Prostate','Esophagus','Stomach','CNS','Head/Neck','Kidney','Liver','Lung','Ovary','Pancreas','Skin','Thyroid','Uterus')
TurnOverDays = c(200,5373,84.5,200,6,30,30,5,120,11,5.5,10000,16,1000,400,5143,11000,360,147,4138,4); length(TurnOverDays)
Turn = data.frame(CancerTissue,TurnOverDays)
Turn = Turn[order(Turn$TurnOverDays),]
summary(Turn$TurnOverDays)
Turn$DummyNotFastTurnOver = 0;
Turn$DummySlowTurnOver = 0;
Turn$DummyVerySlowTurnOver = 0;
for (i in 1:nrow(Turn))
{
if (Turn$TurnOverDays[i] > 1000) {Turn$DummyVerySlowTurnOver[i] = 1} # if  slower than the third quartile (1000 days)
if (Turn$TurnOverDays[i] > 147)  {Turn$DummySlowTurnOver[i] = 1}  # if  slower than the median (147 days)
if (Turn$TurnOverDays[i] > 16)  {Turn$DummyNotFastTurnOver[i] = 1}  # if  slower than the median (147 days)
}
Turn
Mut = merge(Mut,Turn, by.x = 'Tier2', by.y = 'CancerTissue')
summary(Mut$TurnOverDays) # there are no NA - good
Mut$TBSS = NA
for (i in 1:nrow(Mut))
{ # i = 1
if (Mut$position[i] > 576 & Mut$position[i] < 5721) # minor arc
{Mut$TBSS[i] = 16569-(5721 - Mut$position[i])*2} # L-strand replication origin (locus MT-OLR, 5721 - 5798)
if (Mut$position[i] > 5798 & Mut$position[i] < 16024) # major arc
{Mut$TBSS[i] = (Mut$position[i] - 5798)*2}
}
summary(Mut$TBSS)
plot(Mut$position,Mut$TBSS)
Mut$DummyAhGh = 0; Mut$DummyChTh = 0; Mut$DummyTs = 0; Mut$DummyTv = 0;
for (i in 1:nrow(Mut))
{ # i=1
if (Mut$Subst[i] == 'T>C') {Mut$DummyAhGh[i] = 1}
if (Mut$Subst[i] == 'G>A') {Mut$DummyChTh[i] = 1}
if (Mut$Subst[i] %in% c('G>A','T>C','C>T','A>G')) {Mut$DummyTs[i] = 1}
if (!Mut$Subst[i] %in% c('G>A','T>C','C>T','A>G')) {Mut$DummyTv[i] = 1}
}
table(Mut$DummyAhGh)
table(Mut$DummyChTh)
table(Mut$DummyTs)
table(Mut$DummyTv)
summary(glm(Mut$DummyAhGh ~ Mut$TBSS, family = binomial)) # marginally significant and negative (probably due to strong positive effect of C>T)
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TBSS, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$TBSS, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TurnOverDays, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$TurnOverDays, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyChTh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyChTh ~ Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TBSS + Mut$TurnOverDays + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TBSS + Mut[!is.na(Mut$TBSS),]$TurnOverDays + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial)) # the same => glm eliminates all rows with at least one NA
summary(glm(Mut$DummyAhGh ~ Mut$TBSS + Mut$DummyNotFastTurnOver + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TurnOverDays + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$DummyNotFastTurnOver + Mut$tumor_var_freq, family = binomial)) # !!!!
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$DummyNotFastTurnOver + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial)) # still significant but both p-values become higher
for (i in 1:nrow(Mut))
{
Mut$SubstWithContext[i] = paste(unlist(strsplit(Mut$X[i],''))[10],Mut$Subst[i],unlist(strsplit(Mut$X.1[i],''))[1],sep = '')
}
table(Mut$DummySlowTurnOver)
A = Mut[Mut$DummySlowTurnOver == 1,]
A = data.frame(table(A$SubstWithContext)); names(A)[2] = 'AFreq'
B = Mut[Mut$DummySlowTurnOver == 0,]
B = data.frame(table(B$SubstWithContext)); names(B)[2] = 'BFreq'
AB = merge(A,B)
AB = merge(A,B, all = TRUE)
cosine(AB$AFreq, AB$BFreq)
AB = merge(A,B)
cosine(AB$AFreq, AB$BFreq)
a = Mut[Mut$DummySlowTurnOver == 1,]$SubstWithContext
a
A = data.frame(table(a))
View(A)
A = data.frame(table(a)); names(A)[2] = 'AFreq'
B = data.frame(table(b)); names(B)[2] = 'BFreq'
b = Mut[Mut$DummySlowTurnOver == 0,]$SubstWithContext
B = data.frame(table(b)); names(B)[2] = 'BFreq'
AB = merge(A,B)
cosine(AB$AFreq, AB$BFreq) # 0.98
FunCosineSimOfTwoLists <- function(a,b)
{
A = data.frame(table(a)); names(A)[2] = 'AFreq'
B = data.frame(table(b)); names(B)[2] = 'BFreq'
AB = merge(A,B)
cos = cosine(AB$AFreq, AB$BFreq) # 0.98
print (cos)
}
FunCosineSimOfTwoLists(a,b)
a = Mut[Mut$DummySlowTurnOver == 1,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0,]$SubstWithContext
FunCosineSimOfTwoLists(a,b)
View(B)
FunCosineSimOfTwoLists <- function(a,b)
{
A = data.frame(table(a)); names(A) = c('subst','AFreq')
B = data.frame(table(b)); names(B) = c('subst','BFreq')
AB = merge(A,B)
cos = cosine(AB$AFreq, AB$BFreq) # 0.98
print (cos)
}
FunCosineSimOfTwoLists(a,b)
summary(Mut$tumor_var_freq)
a = Mut[Mut$tumor_var_freq <= 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver > 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b)
FunCosineSimOfTwoLists(a,b)
a = Mut[Mut$tumor_var_freq <= 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver > 4.37,]$SubstWithContext
a
b
b = Mut[Mut$tumor_var_freq > 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b)
table(Mut$DummySlowTurnOver)
a = Mut[Mut$DummySlowTurnOver == 1,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0,]$SubstWithContext
FunCosineSimOfTwoLists(a,b)
summary(Mut$tumor_var_freq) # 4.37
a = Mut[Mut$tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$tumor_var_freq > 25.39,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.986
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.967
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.968
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
library(knitr)
library(tidyverse)
library(kableExtra)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lsa) # install.packages("lsa"); install.packages("SnowballC")
Mut = read.table("../data/1raw/mtDNA_snv_Oct2016.txt", head = TRUE, sep = '\t')
names(Mut)
Mut$Subst = paste(Mut$ref,Mut$var,sep = '>')
table(Mut$Subst) # light chain notation is be default
table(Mut$Tier2) # cancer tissue
Mut$tumor_var_freq = as.numeric(gsub('%','',Mut$tumor_var_freq))
summary(Mut$tumor_var_freq)
hist(Mut$position, breaks = 200)
CancerTissue = c('Bladder','Bone/SoftTissue','Breast','Biliary','Cervix','Lymphoid','Myeloid','Colon/Rectum','Prostate','Esophagus','Stomach','CNS','Head/Neck','Kidney','Liver','Lung','Ovary','Pancreas','Skin','Thyroid','Uterus')
TurnOverDays = c(200,5373,84.5,200,6,30,30,5,120,11,5.5,10000,16,1000,400,5143,11000,360,147,4138,4); length(TurnOverDays)
Turn = data.frame(CancerTissue,TurnOverDays)
Turn = Turn[order(Turn$TurnOverDays),]
summary(Turn$TurnOverDays)
Turn$DummyNotFastTurnOver = 0;
Turn$DummySlowTurnOver = 0;
Turn$DummyVerySlowTurnOver = 0;
for (i in 1:nrow(Turn))
{
if (Turn$TurnOverDays[i] > 1000) {Turn$DummyVerySlowTurnOver[i] = 1} # if  slower than the third quartile (1000 days)
if (Turn$TurnOverDays[i] > 147)  {Turn$DummySlowTurnOver[i] = 1}  # if  slower than the median (147 days)
if (Turn$TurnOverDays[i] > 16)  {Turn$DummyNotFastTurnOver[i] = 1}  # if  slower than the median (147 days)
}
Turn
Mut = merge(Mut,Turn, by.x = 'Tier2', by.y = 'CancerTissue')
summary(Mut$TurnOverDays) # there are no NA - good
Mut$TBSS = NA
for (i in 1:nrow(Mut))
{ # i = 1
if (Mut$position[i] > 576 & Mut$position[i] < 5721) # minor arc
{Mut$TBSS[i] = 16569-(5721 - Mut$position[i])*2} # L-strand replication origin (locus MT-OLR, 5721 - 5798)
if (Mut$position[i] > 5798 & Mut$position[i] < 16024) # major arc
{Mut$TBSS[i] = (Mut$position[i] - 5798)*2}
}
summary(Mut$TBSS)
plot(Mut$position,Mut$TBSS)
Mut$DummyAhGh = 0; Mut$DummyChTh = 0; Mut$DummyTs = 0; Mut$DummyTv = 0;
for (i in 1:nrow(Mut))
{ # i=1
if (Mut$Subst[i] == 'T>C') {Mut$DummyAhGh[i] = 1}
if (Mut$Subst[i] == 'G>A') {Mut$DummyChTh[i] = 1}
if (Mut$Subst[i] %in% c('G>A','T>C','C>T','A>G')) {Mut$DummyTs[i] = 1}
if (!Mut$Subst[i] %in% c('G>A','T>C','C>T','A>G')) {Mut$DummyTv[i] = 1}
}
table(Mut$DummyAhGh)
table(Mut$DummyChTh)
table(Mut$DummyTs)
table(Mut$DummyTv)
summary(glm(Mut$DummyAhGh ~ Mut$TBSS, family = binomial)) # marginally significant and negative (probably due to strong positive effect of C>T)
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TBSS, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$TBSS, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TurnOverDays, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$TurnOverDays, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyChTh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyChTh ~ Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TBSS + Mut$TurnOverDays + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TBSS + Mut[!is.na(Mut$TBSS),]$TurnOverDays + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial)) # the same => glm eliminates all rows with at least one NA
summary(glm(Mut$DummyAhGh ~ Mut$TBSS + Mut$DummyNotFastTurnOver + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TurnOverDays + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$DummyNotFastTurnOver + Mut$tumor_var_freq, family = binomial)) # !!!!
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$DummyNotFastTurnOver + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial)) # still significant but both p-values become higher
for (i in 1:nrow(Mut))
{
Mut$SubstWithContext[i] = paste(unlist(strsplit(Mut$X[i],''))[10],Mut$Subst[i],unlist(strsplit(Mut$X.1[i],''))[1],sep = '')
}
# derive 192 MutSpec for different groups of mutations (by tissue type, VAF, location):
FunCosineSimOfTwoLists <- function(a,b)
{
A = data.frame(table(a)); names(A) = c('subst','AFreq')
B = data.frame(table(b)); names(B) = c('subst','BFreq')
AB = merge(A,B)
cos = cosine(AB$AFreq, AB$BFreq) # 0.98
print (cos)
}
table(Mut$DummySlowTurnOver)
a = Mut[Mut$DummySlowTurnOver == 1,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.985
# VAF
summary(Mut$tumor_var_freq) # 4.37
a = Mut[Mut$tumor_var_freq <= 4.37,]$SubstWithContext
b = Mut[Mut$tumor_var_freq > 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.986
a = Mut[Mut$tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$tumor_var_freq > 25.39,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.967
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.968
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.942
a = Mut[Mut$DummySlowTurnOver == 1,]$SubstWithContext # slow ()
b = Mut[Mut$tumor_var_freq > 4.37,]$SubstWithContext # high VAF
FunCosineSimOfTwoLists(a,b) # 0.968
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq <= 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq > 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.968
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.968
summary(Mut$tumor_var_freq) # 4.37
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.968
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.978
summary(Mut$tumor_var_freq) # 4.37
a = Mut[Mut$tumor_var_freq <= 4.37,]$SubstWithContext
b = Mut[Mut$tumor_var_freq > 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.986
a = Mut[Mut$tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$tumor_var_freq > 25.39,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.967
Mut$ReSampled.tumor_var_freq = sample(Mut$tumor_var_freq)
Mut$ReSampled.tumor_var_freq = sample(Mut$tumor_var_freq)
a = Mut[Mut$ReSampled.tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$ReSampled.tumor_var_freq > 25.39,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.967
FunCosineSimOfTwoLists(a,b)
as.numeric(FunCosineSimOfTwoLists(a,b))
as.numeric(FunCosineSimOfTwoLists(a,b))
as.numeric(FunCosineSimOfTwoLists(a,b)[1])
as.numeric(FunCosineSimOfTwoLists(a,b)[1])
as.numeric(FunCosineSimOfTwoLists(a,b)[1])
as.numeric(FunCosineSimOfTwoLists(a,b)[1,1])
as.numeric(FunCosineSimOfTwoLists(a,b)[1,1])
vec = as.numeric(FunCosineSimOfTwoLists(a,b))
vec
PermVec = c()
Reality = FunCosineSimOfTwoLists(a,b) # 0.967
Reality
Reality = as.numeric(FunCosineSimOfTwoLists(a,b))
Reality
PermVec = c()
for (permut in 1:1000)
{
Mut$ReSampled.tumor_var_freq = sample(Mut$tumor_var_freq)
a = Mut[Mut$ReSampled.tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$ReSampled.tumor_var_freq > 25.39,]$SubstWithContext
PermVec = c(PermVec,as.numeric(FunCosineSimOfTwoLists(a,b)))
}
length(PermVec)
length(PermVec[PermVec < Reality])
length(PermVec[PermVec < Reality])/length(PermVec)
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.942
Reality = FunCosineSimOfTwoLists(a,b) # 0.942
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
Reality = as.numeric(FunCosineSimOfTwoLists(a,b)) # 0.942
PermVec = c()
for (permut in 1:1000)
{
Mut$ReSampled.tumor_var_freq = sample(Mut$tumor_var_freq)
Mut$ReSampled.DummySlowTurnOver = sample(Mut$DummySlowTurnOver)
a = Mut[Mut$ReSampled.DummySlowTurnOver == 1 & Mut$ReSampled.tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$ReSampled.DummySlowTurnOver == 0 & Mut$ReSampled.tumor_var_freq <= 1.68,]$SubstWithContext
PermVec = c(PermVec,as.numeric(FunCosineSimOfTwoLists(a,b)))
}
length(PermVec)
length(PermVec[PermVec < Reality])
length(PermVec[PermVec < Reality])/length(PermVec) # p = 0.18
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
library(knitr)
library(tidyverse)
library(kableExtra)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lsa) # install.packages("lsa"); install.packages("SnowballC")
Mut = read.table("../data/1raw/mtDNA_snv_Oct2016.txt", head = TRUE, sep = '\t')
names(Mut)
Mut$Subst = paste(Mut$ref,Mut$var,sep = '>')
table(Mut$Subst) # light chain notation is be default
table(Mut$Tier2) # cancer tissue
Mut$tumor_var_freq = as.numeric(gsub('%','',Mut$tumor_var_freq))
summary(Mut$tumor_var_freq)
hist(Mut$position, breaks = 200)
CancerTissue = c('Bladder','Bone/SoftTissue','Breast','Biliary','Cervix','Lymphoid','Myeloid','Colon/Rectum','Prostate','Esophagus','Stomach','CNS','Head/Neck','Kidney','Liver','Lung','Ovary','Pancreas','Skin','Thyroid','Uterus')
TurnOverDays = c(200,5373,84.5,200,6,30,30,5,120,11,5.5,10000,16,1000,400,5143,11000,360,147,4138,4); length(TurnOverDays)
Turn = data.frame(CancerTissue,TurnOverDays)
Turn = Turn[order(Turn$TurnOverDays),]
summary(Turn$TurnOverDays)
Turn$DummyNotFastTurnOver = 0;
Turn$DummySlowTurnOver = 0;
Turn$DummyVerySlowTurnOver = 0;
for (i in 1:nrow(Turn))
{
if (Turn$TurnOverDays[i] > 1000) {Turn$DummyVerySlowTurnOver[i] = 1} # if  slower than the third quartile (1000 days)
if (Turn$TurnOverDays[i] > 147)  {Turn$DummySlowTurnOver[i] = 1}  # if  slower than the median (147 days)
if (Turn$TurnOverDays[i] > 16)  {Turn$DummyNotFastTurnOver[i] = 1}  # if  slower than the median (147 days)
}
Turn
Mut = merge(Mut,Turn, by.x = 'Tier2', by.y = 'CancerTissue')
summary(Mut$TurnOverDays) # there are no NA - good
Mut$TBSS = NA
for (i in 1:nrow(Mut))
{ # i = 1
if (Mut$position[i] > 576 & Mut$position[i] < 5721) # minor arc
{Mut$TBSS[i] = 16569-(5721 - Mut$position[i])*2} # L-strand replication origin (locus MT-OLR, 5721 - 5798)
if (Mut$position[i] > 5798 & Mut$position[i] < 16024) # major arc
{Mut$TBSS[i] = (Mut$position[i] - 5798)*2}
}
summary(Mut$TBSS)
plot(Mut$position,Mut$TBSS)
Mut$DummyAhGh = 0; Mut$DummyChTh = 0; Mut$DummyTs = 0; Mut$DummyTv = 0;
for (i in 1:nrow(Mut))
{ # i=1
if (Mut$Subst[i] == 'T>C') {Mut$DummyAhGh[i] = 1}
if (Mut$Subst[i] == 'G>A') {Mut$DummyChTh[i] = 1}
if (Mut$Subst[i] %in% c('G>A','T>C','C>T','A>G')) {Mut$DummyTs[i] = 1}
if (!Mut$Subst[i] %in% c('G>A','T>C','C>T','A>G')) {Mut$DummyTv[i] = 1}
}
table(Mut$DummyAhGh)
table(Mut$DummyChTh)
table(Mut$DummyTs)
table(Mut$DummyTv)
summary(glm(Mut$DummyAhGh ~ Mut$TBSS, family = binomial)) # marginally significant and negative (probably due to strong positive effect of C>T)
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TBSS, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$TBSS, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TurnOverDays, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$TurnOverDays, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyChTh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyChTh ~ Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyChTh ~ Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TBSS + Mut$TurnOverDays + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TBSS + Mut[!is.na(Mut$TBSS),]$TurnOverDays + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial)) # the same => glm eliminates all rows with at least one NA
summary(glm(Mut$DummyAhGh ~ Mut$TBSS + Mut$DummyNotFastTurnOver + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$TurnOverDays + Mut$tumor_var_freq, family = binomial))
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$TurnOverDays + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial))
summary(glm(Mut$DummyAhGh ~ Mut$DummyNotFastTurnOver + Mut$tumor_var_freq, family = binomial)) # !!!!
summary(glm(Mut[!is.na(Mut$TBSS),]$DummyAhGh ~ Mut[!is.na(Mut$TBSS),]$DummyNotFastTurnOver + Mut[!is.na(Mut$TBSS),]$tumor_var_freq, family = binomial)) # still significant but both p-values become higher
# derive context for each mutation
for (i in 1:nrow(Mut))
{
Mut$SubstWithContext[i] = paste(unlist(strsplit(Mut$X[i],''))[10],Mut$Subst[i],unlist(strsplit(Mut$X.1[i],''))[1],sep = '')
}
# derive 192 MutSpec for different groups of mutations (by tissue type, VAF, location):
FunCosineSimOfTwoLists <- function(a,b)
{
A = data.frame(table(a)); names(A) = c('subst','AFreq')
B = data.frame(table(b)); names(B) = c('subst','BFreq')
AB = merge(A,B)
cos = cosine(AB$AFreq, AB$BFreq) # 0.98
print (cos)
}
# TurnOverRate
table(Mut$DummySlowTurnOver)
a = Mut[Mut$DummySlowTurnOver == 1,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.985
# VAF
summary(Mut$tumor_var_freq) # 4.37
a = Mut[Mut$tumor_var_freq <= 4.37,]$SubstWithContext
b = Mut[Mut$tumor_var_freq > 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.986
a = Mut[Mut$tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$tumor_var_freq > 25.39,]$SubstWithContext
Reality = as.numeric(FunCosineSimOfTwoLists(a,b)) # 0.967
PermVec = c()
for (permut in 1:1000)
{
Mut$ReSampled.tumor_var_freq = sample(Mut$tumor_var_freq)
a = Mut[Mut$ReSampled.tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$ReSampled.tumor_var_freq > 25.39,]$SubstWithContext
PermVec = c(PermVec,as.numeric(FunCosineSimOfTwoLists(a,b)))
}
length(PermVec)
length(PermVec[PermVec < Reality])/length(PermVec) # p = 0.18
# Slow versus High VAF (don't consider intersected mutations which are in both)
a = Mut[Mut$DummySlowTurnOver == 1,]$SubstWithContext # slow ()
b = Mut[Mut$tumor_var_freq > 4.37,]$SubstWithContext # high VAF
FunCosineSimOfTwoLists(a,b) # 0.9949
# MIXED GROUP (Slow and Recent) VS ANOTHER MIXED GROUP (Fast and Old)
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq <= 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq > 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.978
# VERY MIXED GROUP (Slow and very Recent) VS ANOTHER VERY MIXED GROUP (Fast and very Old)
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.953
#  NORMOXIC (Slow and Old) VS HYPOXIC (Fast and Recent)
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 4.37,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 4.37,]$SubstWithContext
FunCosineSimOfTwoLists(a,b) # 0.968
# VERY NORMOXIC (Slow and Old) VS VERY HYPOXIC (Fast and Recent)
a = Mut[Mut$DummySlowTurnOver == 1 & Mut$tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$DummySlowTurnOver == 0 & Mut$tumor_var_freq <= 1.68,]$SubstWithContext
Reality = as.numeric(FunCosineSimOfTwoLists(a,b)) # 0.942
PermVec = c()
for (permut in 1:1000)
{
Mut$ReSampled.tumor_var_freq = sample(Mut$tumor_var_freq)
Mut$ReSampled.DummySlowTurnOver = sample(Mut$DummySlowTurnOver)
a = Mut[Mut$ReSampled.DummySlowTurnOver == 1 & Mut$ReSampled.tumor_var_freq > 25.39,]$SubstWithContext
b = Mut[Mut$ReSampled.DummySlowTurnOver == 0 & Mut$ReSampled.tumor_var_freq <= 1.68,]$SubstWithContext
PermVec = c(PermVec,as.numeric(FunCosineSimOfTwoLists(a,b)))
}
length(PermVec)
length(PermVec[PermVec < Reality])/length(PermVec) # p = 0.017
# may be we have to use only Ts for cosine similarity?
